03 Object-Oriented Programming
Test your knowledge
1. What are the six combinations of access modifier keywords and what do they do? 
    public – Anyone can access.
    private – Only inside the same class.
    protected – Inside the same class or derived (child) classes.
    internal – Only in the same project/assembly.
    protected internal – Same project or in a derived class.
    private protected – Only in the same class or a derived class in the same project.
    
2.What is the difference between the static, const, and readonly keywords when applied to a type member?
    static – Shared by all instances; belongs to the class.
    const – Fixed value set at compile time; can't be changed.
    readonly – Value set at runtime (in constructor); can’t be changed after that.
    
3. What does a constructor do?
    It runs automatically when you create an instance of a class.
  
4. Why is the partial keyword useful?
    It lets you split a class into many files.

5. What is a tuple?
    A small group of values (like a mini-object) that you can return from a method. 

6. What does the C# record keyword do?
    It creates a special class mainly used to store data. It gives you built-in value equality and less code.

7. What does overloading and overriding mean?
    Overloading – Same method name but different parameters.
    Overriding – A derived class changes the behavior of a method from its base class.
    
8. What is the difference between a field and a property?
    Field – A variable inside a class.
    Property – A way to control access to a field (like using get and set).
    
9. How do you make a method parameter optional?
    Give it a default value.

10. What is an interface and how is it different from abstract class?
    Interface – Only says what should be done (no code). 
    Abstract class – Can say what should be done and how.

11. What accessibility level are members of an interface?
    public
    
12. True/False. Polymorphism allows derived classes to provide different implementations of the same method.
    True

13. True/False. The override keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
    True

14. True/False. The new keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
    True

15. True/False. Abstract methods can be used in a normal (non-abstract) class. 
    False Abstract methods can only be in abstract classes.

16. True/False. Normal (non-abstract) methods can be used in an abstract class. 
    True

17. True/False. Derived classes can override methods that were virtual in the base class. 
    True

18. True/False. Derived classes can override methods that were abstract in the base class. 
    True

19. True/False. In a derived class, you can override a method that was neither virtual non abstract in the base class.
    False. You cannot override it unless it was marked virtual or abstract

20. True/False. A class that implements an interface does not have to provide an implementation for all of the members of the interface.
    False. No, you must implement all members unless it's marked abstract.
    
21. True/False. A class that implements an interface is allowed to have other members that aren’t defined in the interface.
    True

22. True/False. A class can have more than one base class.
    False. Only one
    
23. True/False. A class can implement more than one interface.
    True
